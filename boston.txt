import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import Adam


# Step 1: Load the dataset
data = pd.read_csv('BostonHousing.csv')

data.shape

# Step 2: Preprocess the data
#X contains all columns except the last one
X = data.iloc[:, :-1].values  # Features
print(X)


# y contains only the last column.
y = data.iloc[:, -1].values   # Target variable

print(y)

X.shape

y.shape

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Reshape y to have compatible dimensions
y = y.reshape(-1, 1)

y.shape

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


# Step 3: Implement simple linear regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)


# Step 4: Calculate performance metrics for simple linear regression
r2_lr = r2_score(y_test, y_pred_lr)
mae_lr = mean_absolute_error(y_test, y_pred_lr)
mse_lr = mean_squared_error(y_test, y_pred_lr)
rmse_lr = np.sqrt(mse_lr)

print("Simple Linear Regression Metrics:")
print("R2 Score:", r2_lr)
print("Mean Absolute Error (MAE):", mae_lr)


# Step 5: Implement linear regression using a DNN
model = Sequential([
    Dense(64, input_shape=(X_train.shape[1],), activation='relu'),
    Dense(1)
])

model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=0)

y_pred_dnn = model.predict(X_test)


# Step 6: Calculate performance metrics for linear regression using DNN
r2_dnn = r2_score(y_test, y_pred_dnn)
mae_dnn = mean_absolute_error(y_test, y_pred_dnn)
mse_dnn = mean_squared_error(y_test, y_pred_dnn)
rmse_dnn = np.sqrt(mse_dnn)

print("\nLinear Regression using DNN Metrics:")
print("R2 Score:", r2_dnn)
print("Mean Absolute Error (MAE):", mae_dnn)
print("Mean Squared Error (MSE):", mse_dnn)
print("Root Mean Squared Error (RMSE):", rmse_dnn)

