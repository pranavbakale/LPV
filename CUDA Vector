// CUDA Program for Addition of Two Large Vectors

#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

#define N 1000000 // Size of the vectors

// CUDA kernel for vector addition
__global__ void vectorAddition(float *a, float *b, float *c, int n) {
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    if (index < n) {
        c[index] = a[index] + b[index];
    }
}

int main() {
    float *h_a, *h_b, *h_c; // Host vectors
    float *d_a, *d_b, *d_c; // Device vectors
    int size = N * sizeof(float);

    // Allocate memory for host vectors
    h_a = (float*)malloc(size);
    h_b = (float*)malloc(size);
    h_c = (float*)malloc(size);

    // Initialize host vectors
    for (int i = 0; i < N; ++i) {
        h_a[i] = rand() / (float)RAND_MAX;
        h_b[i] = rand() / (float)RAND_MAX;
    }

    // Allocate memory for device vectors
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy host vectors to device
    cudaMemcpy(d_a, h_a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, size, cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    int blockSize = 256;
    int gridSize = (N + blockSize - 1) / blockSize;

    // Launch kernel for vector addition
    vectorAddition<<<gridSize, blockSize>>>(d_a, d_b, d_c, N);

    // Copy result from device to host
    cudaMemcpy(h_c, d_c, size, cudaMemcpyDeviceToHost);

    // Measure performance of sequential algorithm
    clock_t start = clock();
    for (int i = 0; i < N; ++i) {
        h_c[i] = h_a[i] + h_b[i];
    }
    clock_t end = clock();
    double sequentialTime = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Measure performance of parallel algorithm
    cudaEvent_t parallelStart, parallelEnd;
    cudaEventCreate(&parallelStart);
    cudaEventCreate(&parallelEnd);
    cudaEventRecord(parallelStart);
    vectorAddition<<<gridSize, blockSize>>>(d_a, d_b, d_c, N);
    cudaEventRecord(parallelEnd);
    cudaEventSynchronize(parallelEnd);
    float parallelTime = 0;
    cudaEventElapsedTime(&parallelTime, parallelStart, parallelEnd);
    parallelTime /= 1000; // Convert milliseconds to seconds

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    // Free host memory
    free(h_a);
    free(h_b);
    free(h_c);

    printf("Sequential Time: %f seconds\n", sequentialTime);
    printf("Parallel Time: %f seconds\n", parallelTime);

    return 0;
}

